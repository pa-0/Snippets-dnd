using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace Snippets
{
    /// <summary>
    /// 
    /// </summary>
    public static class GlobalHotkeys
    {
        private static readonly Dictionary<int, Tuple<object?, Action<object?>>> hotkeys = new Dictionary<int, Tuple<object?, Action<object?>>>();
        private static int lastUsedID = 0;
        private const int WM_HOTKEY = 0x0312;

        /// <summary>
        /// Register a hotkey.
        /// </summary>
        public static HotkeyContract RegisterHotkey(IntPtr windowHandle, KeyModifiers modifiers, Keys key, object? passIn, Action<object?> action)
        {
            int id = lastUsedID++;

            bool success = RegisterHotKey(windowHandle, id, modifiers, key);

            if(!success)
            {
                UnregisterHotKey(windowHandle, id);
                success = RegisterHotKey(windowHandle, id, modifiers, key);
            }

            if(!success)
            {
                int lastError = Marshal.GetLastWin32Error();
                string hex = lastError.ToString("X");
                throw new Exception("Couldn't register hotkey. Win32 Error: " + hex);
            }

            hotkeys[id] = new Tuple<object?, Action<object?>>(passIn, action);
            return new HotkeyContract(id, windowHandle);
        }
        /// <summary>
        /// Releases a hotkey by ID. Use the contract it gives instead.
        /// </summary>
        /// <param name="id"></param>
        internal static void ReleaseHotkey(int id, IntPtr windowHandle)
        {
            UnregisterHotKey(windowHandle, id);
            hotkeys.Remove(id);
        }
        /// <summary>
        /// Processes a windows message.
        /// </summary>
        /// <param name="m"></param>
        /// <returns>If this method handled the message.</returns>
        public static bool ProcessMessage(ref Message m)
        {
            if (m.Msg != WM_HOTKEY)
                return false;

            int pressedId = m.WParam.ToInt32();

            if (!hotkeys.TryGetValue(pressedId, out var action))
                return false;

            action.Item2(action.Item1);
            return true;
        }

        /// <summary>
        /// Define a system-wide hot key.
        /// </summary>
        /// <param name="hWnd">A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL, WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.</param>
        /// <param name="id">The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is associated with the current thread rather than with a particular window.</param>
        /// <param name="fsModifiers">
        /// The keys that must be pressed in combination with the key specified by the
        /// uVirtKey parameter in order to generate the WM_HOTKEY message. The fsModifiers
        /// parameter can be a combination of the following values.
        /// MOD_ALT     0x0001
        /// MOD_CONTROL 0x0002
        /// MOD_SHIFT   0x0004
        /// MOD_WIN     0x0008
        /// </param>
        /// <param name="vk">The virtual-key code of the hot key.</param>
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern bool RegisterHotKey(IntPtr hWnd, int id,
            KeyModifiers fsModifiers, Keys vk);

        /// <summary>
        /// Frees a hot key previously registered by the calling thread.
        /// </summary>
        /// <param name="hWnd">A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not associated with a window.</param>
        /// <param name="id">The identifier of the hot key to be freed.</param>
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern bool UnregisterHotKey(IntPtr hWnd, int id);
    }

    [Flags]
    public enum KeyModifiers
    {
        None = 0x0000,
        Alt = 0x0001,
        Control = 0x0002,
        Shift = 0x0004,
        Windows = 0x0008,
        NoRepeat = 0x4000
    }
    /// <summary>
    /// Contract-release pattern that holds a registered hotkey. Dispose this object to release the hotkey.
    /// </summary>
    public class HotkeyContract : IDisposable
    {
        private readonly int hotkeyId;
        private readonly IntPtr windowHandle;
        private bool isDisposed;

        internal HotkeyContract(int hotkeyId, IntPtr windowHandle)
        {
            this.hotkeyId = hotkeyId;
            this.windowHandle = windowHandle;
        }
        public void Dispose()
        {
            if(!isDisposed)
            {
                isDisposed = true;
                GlobalHotkeys.ReleaseHotkey(hotkeyId, windowHandle);
            }
        }
    }
}
